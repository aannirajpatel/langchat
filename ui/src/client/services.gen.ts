// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { CreateChatApiV1ChatsPostResponse, ListChatsApiV1ChatsGetResponse, GetChatApiV1ChatsChatIdGetData, GetChatApiV1ChatsChatIdGetResponse, DeleteChatApiV1ChatsChatIdDeleteData, DeleteChatApiV1ChatsChatIdDeleteResponse, AddMessageApiV1ChatsChatIdMessagesPostData, AddMessageApiV1ChatsChatIdMessagesPostResponse, ListMessagesApiV1ChatsChatIdMessagesGetData, ListMessagesApiV1ChatsChatIdMessagesGetResponse, GetMessageApiV1ChatsChatIdMessagesMessageIdGetData, GetMessageApiV1ChatsChatIdMessagesMessageIdGetResponse, DeleteMessageApiV1ChatsChatIdMessagesMessageIdDeleteData, DeleteMessageApiV1ChatsChatIdMessagesMessageIdDeleteResponse, UpdateMessageContentApiV1ChatsChatIdMessagesMessageIdContentPutData, UpdateMessageContentApiV1ChatsChatIdMessagesMessageIdContentPutResponse } from './types.gen';

/**
 * Create Chat
 * @returns Chat Successful Response
 * @throws ApiError
 */
export const createChatApiV1ChatsPost = (): CancelablePromise<CreateChatApiV1ChatsPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/chats/',
    errors: {
        401: 'Unauthorized or limited access'
    }
}); };

/**
 * List Chats
 * @returns Chat Successful Response
 * @throws ApiError
 */
export const listChatsApiV1ChatsGet = (): CancelablePromise<ListChatsApiV1ChatsGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/chats',
    errors: {
        401: 'Unauthorized or limited access'
    }
}); };

/**
 * Get Chat
 * @param data The data for the request.
 * @param data.chatId
 * @returns Chat Successful Response
 * @throws ApiError
 */
export const getChatApiV1ChatsChatIdGet = (data: GetChatApiV1ChatsChatIdGetData): CancelablePromise<GetChatApiV1ChatsChatIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/chats/{chat_id}',
    path: {
        chat_id: data.chatId
    },
    errors: {
        401: 'Unauthorized or limited access',
        422: 'Validation Error'
    }
}); };

/**
 * Delete Chat
 * @param data The data for the request.
 * @param data.chatId
 * @returns string Successful Response
 * @throws ApiError
 */
export const deleteChatApiV1ChatsChatIdDelete = (data: DeleteChatApiV1ChatsChatIdDeleteData): CancelablePromise<DeleteChatApiV1ChatsChatIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/chats/{chat_id}',
    path: {
        chat_id: data.chatId
    },
    errors: {
        401: 'Unauthorized or limited access',
        422: 'Validation Error'
    }
}); };

/**
 * Add Message
 * @param data The data for the request.
 * @param data.chatId
 * @param data.requestBody
 * @returns string Successful Response
 * @throws ApiError
 */
export const addMessageApiV1ChatsChatIdMessagesPost = (data: AddMessageApiV1ChatsChatIdMessagesPostData): CancelablePromise<AddMessageApiV1ChatsChatIdMessagesPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/chats/{chat_id}/messages/',
    path: {
        chat_id: data.chatId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        401: 'Unauthorized or limited access',
        422: 'Validation Error'
    }
}); };

/**
 * List Messages
 * @param data The data for the request.
 * @param data.chatId
 * @returns ChatMessage Successful Response
 * @throws ApiError
 */
export const listMessagesApiV1ChatsChatIdMessagesGet = (data: ListMessagesApiV1ChatsChatIdMessagesGetData): CancelablePromise<ListMessagesApiV1ChatsChatIdMessagesGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/chats/{chat_id}/messages/',
    path: {
        chat_id: data.chatId
    },
    errors: {
        401: 'Unauthorized or limited access',
        422: 'Validation Error'
    }
}); };

/**
 * Get Message
 * @param data The data for the request.
 * @param data.chatId
 * @param data.messageId
 * @returns ChatMessage Successful Response
 * @throws ApiError
 */
export const getMessageApiV1ChatsChatIdMessagesMessageIdGet = (data: GetMessageApiV1ChatsChatIdMessagesMessageIdGetData): CancelablePromise<GetMessageApiV1ChatsChatIdMessagesMessageIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/chats/{chat_id}/messages/{message_id}',
    path: {
        chat_id: data.chatId,
        message_id: data.messageId
    },
    errors: {
        401: 'Unauthorized or limited access',
        422: 'Validation Error'
    }
}); };

/**
 * Delete Message
 * @param data The data for the request.
 * @param data.chatId
 * @param data.messageId
 * @returns string Successful Response
 * @throws ApiError
 */
export const deleteMessageApiV1ChatsChatIdMessagesMessageIdDelete = (data: DeleteMessageApiV1ChatsChatIdMessagesMessageIdDeleteData): CancelablePromise<DeleteMessageApiV1ChatsChatIdMessagesMessageIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/chats/{chat_id}/messages/{message_id}',
    path: {
        chat_id: data.chatId,
        message_id: data.messageId
    },
    errors: {
        401: 'Unauthorized or limited access',
        422: 'Validation Error'
    }
}); };

/**
 * Update Message Content
 * @param data The data for the request.
 * @param data.chatId
 * @param data.messageId
 * @param data.content
 * @returns string Successful Response
 * @throws ApiError
 */
export const updateMessageContentApiV1ChatsChatIdMessagesMessageIdContentPut = (data: UpdateMessageContentApiV1ChatsChatIdMessagesMessageIdContentPutData): CancelablePromise<UpdateMessageContentApiV1ChatsChatIdMessagesMessageIdContentPutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/v1/chats/{chat_id}/messages/{message_id}/content',
    path: {
        chat_id: data.chatId,
        message_id: data.messageId
    },
    query: {
        content: data.content
    },
    errors: {
        401: 'Unauthorized or limited access',
        422: 'Validation Error'
    }
}); };